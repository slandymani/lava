// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lavanet/lava/dualstaking/dualstaking.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Delegation struct {
	Provider  string     `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	ChainID   string     `protobuf:"bytes,2,opt,name=chainID,proto3" json:"chainID,omitempty"`
	Delegator string     `protobuf:"bytes,3,opt,name=delegator,proto3" json:"delegator,omitempty"`
	Amount    types.Coin `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount"`
	Unstaked  bool       `protobuf:"varint,5,opt,name=unstaked,proto3" json:"unstaked,omitempty"`
}

func (m *Delegation) Reset()         { *m = Delegation{} }
func (m *Delegation) String() string { return proto.CompactTextString(m) }
func (*Delegation) ProtoMessage()    {}
func (*Delegation) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca99b992a1917301, []int{0}
}
func (m *Delegation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Delegation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Delegation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Delegation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Delegation.Merge(m, src)
}
func (m *Delegation) XXX_Size() int {
	return m.Size()
}
func (m *Delegation) XXX_DiscardUnknown() {
	xxx_messageInfo_Delegation.DiscardUnknown(m)
}

var xxx_messageInfo_Delegation proto.InternalMessageInfo

func (m *Delegation) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *Delegation) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

func (m *Delegation) GetDelegator() string {
	if m != nil {
		return m.Delegator
	}
	return ""
}

func (m *Delegation) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *Delegation) GetUnstaked() bool {
	if m != nil {
		return m.Unstaked
	}
	return false
}

type Delegator struct {
	Providers []string `protobuf:"bytes,1,rep,name=providers,proto3" json:"providers,omitempty"`
}

func (m *Delegator) Reset()         { *m = Delegator{} }
func (m *Delegator) String() string { return proto.CompactTextString(m) }
func (*Delegator) ProtoMessage()    {}
func (*Delegator) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca99b992a1917301, []int{1}
}
func (m *Delegator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Delegator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Delegator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Delegator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Delegator.Merge(m, src)
}
func (m *Delegator) XXX_Size() int {
	return m.Size()
}
func (m *Delegator) XXX_DiscardUnknown() {
	xxx_messageInfo_Delegator.DiscardUnknown(m)
}

var xxx_messageInfo_Delegator proto.InternalMessageInfo

func (m *Delegator) GetProviders() []string {
	if m != nil {
		return m.Providers
	}
	return nil
}

func init() {
	proto.RegisterType((*Delegation)(nil), "lavanet.lava.dualstaking.Delegation")
	proto.RegisterType((*Delegator)(nil), "lavanet.lava.dualstaking.Delegator")
}

func init() {
	proto.RegisterFile("lavanet/lava/dualstaking/dualstaking.proto", fileDescriptor_ca99b992a1917301)
}

var fileDescriptor_ca99b992a1917301 = []byte{
	// 304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xb1, 0x4e, 0xfb, 0x30,
	0x10, 0xc6, 0xe3, 0x7f, 0xfb, 0x2f, 0x8d, 0xd9, 0x22, 0x06, 0x53, 0x55, 0x26, 0xea, 0x54, 0x40,
	0xb2, 0x55, 0x18, 0xd8, 0x4b, 0x19, 0x58, 0x3b, 0xb2, 0x39, 0x89, 0x95, 0x5a, 0xb4, 0xbe, 0x2a,
	0x76, 0x22, 0x78, 0x0b, 0x5e, 0x86, 0x77, 0xe8, 0xd8, 0x91, 0x09, 0xa1, 0xe4, 0x45, 0x90, 0x93,
	0x34, 0xb4, 0xd3, 0xdd, 0x77, 0xdf, 0xa7, 0xdc, 0x2f, 0x3e, 0x7c, 0xb3, 0x16, 0x85, 0xd0, 0xd2,
	0x72, 0x57, 0x79, 0x92, 0x8b, 0xb5, 0xb1, 0xe2, 0x55, 0xe9, 0xf4, 0xb8, 0x67, 0xdb, 0x0c, 0x2c,
	0x04, 0xa4, 0xcd, 0x32, 0x57, 0xd9, 0x91, 0x3f, 0xba, 0x48, 0x21, 0x85, 0x3a, 0xc4, 0x5d, 0xd7,
	0xe4, 0x47, 0x34, 0x06, 0xb3, 0x01, 0xc3, 0x23, 0x61, 0x24, 0x2f, 0x66, 0x91, 0xb4, 0x62, 0xc6,
	0x63, 0x50, 0xba, 0xf1, 0x27, 0x9f, 0x08, 0xe3, 0x85, 0x5c, 0xcb, 0x54, 0x58, 0x05, 0x3a, 0x18,
	0xe1, 0xe1, 0x36, 0x83, 0x42, 0x25, 0x32, 0x23, 0x28, 0x44, 0x53, 0x7f, 0xd9, 0xe9, 0x80, 0xe0,
	0xb3, 0x78, 0x25, 0x94, 0x7e, 0x5e, 0x90, 0x7f, 0xb5, 0x75, 0x90, 0xc1, 0x18, 0xfb, 0x49, 0xf3,
	0x0d, 0xc8, 0x48, 0xaf, 0xf6, 0xfe, 0x06, 0xc1, 0x03, 0x1e, 0x88, 0x0d, 0xe4, 0xda, 0x92, 0x7e,
	0x88, 0xa6, 0xe7, 0x77, 0x97, 0xac, 0x61, 0x62, 0x8e, 0x89, 0xb5, 0x4c, 0xec, 0x11, 0x94, 0x9e,
	0xf7, 0x77, 0xdf, 0x57, 0xde, 0xb2, 0x8d, 0x3b, 0x98, 0x5c, 0xbb, 0xdf, 0x93, 0x09, 0xf9, 0x1f,
	0xa2, 0xe9, 0x70, 0xd9, 0xe9, 0xc9, 0x35, 0xf6, 0x17, 0xdd, 0x86, 0x31, 0xf6, 0x0f, 0x94, 0x86,
	0xa0, 0xb0, 0xe7, 0xf6, 0x77, 0x83, 0xf9, 0xd3, 0xae, 0xa4, 0x68, 0x5f, 0x52, 0xf4, 0x53, 0x52,
	0xf4, 0x51, 0x51, 0x6f, 0x5f, 0x51, 0xef, 0xab, 0xa2, 0xde, 0xcb, 0x6d, 0xaa, 0xec, 0x2a, 0x8f,
	0x58, 0x0c, 0x1b, 0x7e, 0x72, 0x83, 0xb7, 0x93, 0x2b, 0xd8, 0xf7, 0xad, 0x34, 0xd1, 0xa0, 0x7e,
	0xb0, 0xfb, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x14, 0x85, 0x15, 0xe0, 0xae, 0x01, 0x00, 0x00,
}

func (m *Delegation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Delegation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Delegation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Unstaked {
		i--
		if m.Unstaked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDualstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Delegator) > 0 {
		i -= len(m.Delegator)
		copy(dAtA[i:], m.Delegator)
		i = encodeVarintDualstaking(dAtA, i, uint64(len(m.Delegator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintDualstaking(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintDualstaking(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Delegator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Delegator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Delegator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Providers) > 0 {
		for iNdEx := len(m.Providers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Providers[iNdEx])
			copy(dAtA[i:], m.Providers[iNdEx])
			i = encodeVarintDualstaking(dAtA, i, uint64(len(m.Providers[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintDualstaking(dAtA []byte, offset int, v uint64) int {
	offset -= sovDualstaking(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Delegation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovDualstaking(uint64(l))
	}
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovDualstaking(uint64(l))
	}
	l = len(m.Delegator)
	if l > 0 {
		n += 1 + l + sovDualstaking(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovDualstaking(uint64(l))
	if m.Unstaked {
		n += 2
	}
	return n
}

func (m *Delegator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Providers) > 0 {
		for _, s := range m.Providers {
			l = len(s)
			n += 1 + l + sovDualstaking(uint64(l))
		}
	}
	return n
}

func sovDualstaking(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDualstaking(x uint64) (n int) {
	return sovDualstaking(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Delegation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDualstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Delegation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Delegation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDualstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDualstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDualstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDualstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDualstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDualstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDualstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDualstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDualstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDualstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDualstaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDualstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unstaked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDualstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Unstaked = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDualstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDualstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Delegator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDualstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Delegator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Delegator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Providers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDualstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDualstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDualstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Providers = append(m.Providers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDualstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDualstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDualstaking(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDualstaking
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDualstaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDualstaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDualstaking
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDualstaking
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDualstaking
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDualstaking        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDualstaking          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDualstaking = fmt.Errorf("proto: unexpected end of group")
)
